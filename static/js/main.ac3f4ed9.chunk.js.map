{"version":3,"sources":["index.js"],"names":["query","queryString","parseUrl","window","location","href","containsQueryString","string","Object","keys","findIndex","v","toUpperCase","queryStringColor","color","startsWith","queryStringColorOnOver","colorOnOver","CandleA","lazy","CandleB","CandleC","CandleD","CandleE","Scene","useThree","camera","size","useMemo","zoom","height","materials","material","THREE","specular","shininess","flatShading","materialOnOver","position","fallback","ReactDOM","render","colorManagement","orthographic","fov","pixelRatio","devicePixelRatio","document","getElementById"],"mappings":"qJAAA,yF,MAQQA,EAAUC,IAAYC,SAASC,OAAOC,SAASC,MAA/CL,MAEFM,EAAuBC,GACpBC,OAAOC,KAAKT,GAAOU,UAAWC,GAAMA,EAAEC,gBAAkBL,EAAOK,gBAAkB,EAEpFC,EACCb,EAAMc,MACJd,EAAMc,MAAMC,WAAW,KAAOf,EAAMc,MAAQ,IAAMd,EAAMc,MADtC,KAIrBE,EACChB,EAAMiB,YACJjB,EAAMiB,YAAYF,WAAW,KAAOf,EAAMiB,YAAc,IAAMjB,EAAMiB,YAD5C,KAI3BC,EAAUC,eAAK,IAAM,oDACrBC,EAAUD,eAAK,IAAM,oDACrBE,EAAUF,eAAK,IAAM,oDACrBG,EAAUH,eAAK,IAAM,oDACrBI,EAAUJ,eAAK,IAAM,oDAErBK,EAAQ,KAAO,MAAD,EAIdC,cAFFC,EAFgB,EAEhBA,OACAC,EAHgB,EAGhBA,KAGFC,kBAAQ,KACNF,EAAOG,KAAOF,EAAKG,OAAS,GAC3B,CAACH,IAEJ,MAAMI,EAAYH,kBAAQ,MACxBI,SAAU,IAAIC,oBAAwB,CAAEnB,MAAOD,GAAoB,UAAWqB,SAAU,WAAYC,UAAW,GAAIC,aAAa,IAChIC,eAAgB,IAAIJ,oBAAwB,CAAEnB,MAAOE,GAA0B,UAAWkB,SAAU,WAAYC,UAAW,GAAIC,aAAa,OAU9I,OACE,oCACE,uCACA,+BAAWE,SAAU,CAAC,GAAI,GAAI,MAC9B,gCAAYA,SAAU,EAAE,IAAK,IAAK,IAAKxB,MAAM,WAC5CR,EAAoB,YACnB,kBAAC,WAAD,CAAUiC,SAAU,MAClB,kBAACrB,EAAYa,IAGhBzB,EAAoB,YACnB,kBAAC,WAAD,CAAUiC,SAAU,MAClB,kBAACnB,EAAYW,IAGhBzB,EAAoB,YACnB,kBAAC,WAAD,CAAUiC,SAAU,MAClB,kBAAClB,EAAYU,IAGhBzB,EAAoB,YACnB,kBAAC,WAAD,CAAUiC,SAAU,MAClB,kBAACjB,EAAYS,IAGhBzB,EAAoB,YACnB,kBAAC,WAAD,CAAUiC,SAAU,MAClB,kBAAChB,EAAYQ,IAGjB,kBAAC,IAAD,QAKNS,IAASC,OACP,kBAAC,IAAD,CACEC,iBAAe,EACfC,cAAY,EACZjB,OAAQ,CAAEY,SAAU,CAAC,EAAG,EAAG,GAC3BT,KAAM,IAAKe,IAAK,IAChBC,WAAY1C,OAAO2C,kBAAoB,GAEvC,kBAACtB,EAAD,OAEFuB,SAASC,eAAe,U","file":"static/js/main.ac3f4ed9.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense, lazy, useMemo } from 'react'\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\nimport { OrbitControls } from 'drei'\nimport queryString from 'query-string'\nimport './styles.css'\n\nconst { query } = queryString.parseUrl(window.location.href)\n\nconst containsQueryString = (string) => {\n  return Object.keys(query).findIndex((v) => v.toUpperCase() === string.toUpperCase()) > -1\n}\nconst queryStringColor = (function () {\n  if (!query.color) return null\n  return query.color.startsWith('#') ? query.color : '#' + query.color\n})()\n\nconst queryStringColorOnOver = (function () {\n  if (!query.colorOnOver) return null\n  return query.colorOnOver.startsWith('#') ? query.colorOnOver : '#' + query.colorOnOver\n})()\n\nconst CandleA = lazy(() => import('./models/candleA'))\nconst CandleB = lazy(() => import('./models/candleB'))\nconst CandleC = lazy(() => import('./models/candleC'))\nconst CandleD = lazy(() => import('./models/candleD'))\nconst CandleE = lazy(() => import('./models/candleE'))\n\nconst Scene = () => {\n  const { \n    camera,\n    size\n  } = useThree()\n\n  useMemo(() => {\n    camera.zoom = size.height / 4\n  }, [size])\n\n  const materials = useMemo(() => ({\n    material: new THREE.MeshPhongMaterial({ color: queryStringColor || '#E18C46', specular: '#F111111', shininess: 30, flatShading: true }),\n    materialOnOver: new THREE.MeshPhongMaterial({ color: queryStringColorOnOver || '#E8A772', specular: '#F111111', shininess: 30, flatShading: true })\n  }))\n\n  // useFrame(() => {\n  //   const MAX_ZOOM = 300\n  //   if (camera.zoom > MAX_ZOOM) {\n  //     camera.zoom = camera.zoom - (camera.zoom - MAX_ZOOM) * 0.075\n  //   }\n  // })\n\n  return (\n    <>\n      <ambientLight />\n      <spotLight position={[10, 10, 10]} />\n      <pointLight position={[-10, -10, -10]} color=\"orange\" />\n      {containsQueryString('candleA') && (\n        <Suspense fallback={null}>\n          <CandleA {...materials} />\n        </Suspense>\n      )}\n      {containsQueryString('candleB') && (\n        <Suspense fallback={null}>\n          <CandleB {...materials} />\n        </Suspense>\n      )}\n      {containsQueryString('candleC') && (\n        <Suspense fallback={null}>\n          <CandleC {...materials} />\n        </Suspense>\n      )}\n      {containsQueryString('candleD') && (\n        <Suspense fallback={null}>\n          <CandleD {...materials} />\n        </Suspense>\n      )}\n      {containsQueryString('candleE') && (\n        <Suspense fallback={null}>\n          <CandleE {...materials} />\n        </Suspense>\n      )}\n      <OrbitControls />\n    </>\n  )\n}\n\nReactDOM.render(\n  <Canvas\n    colorManagement\n    orthographic\n    camera={{ position: [0, 2, 5],\n    zoom: 200, fov: 50 }}\n    pixelRatio={window.devicePixelRatio || 1}\n  >\n    <Scene />\n  </Canvas>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}