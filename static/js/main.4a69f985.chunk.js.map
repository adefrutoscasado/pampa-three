{"version":3,"sources":["index.js"],"names":["query","queryString","parseUrl","window","location","href","containsQueryString","string","Object","keys","findIndex","v","toUpperCase","queryStringColor","color","startsWith","CandleA","lazy","CandleB","CandleC","Scene","camera","useThree","useFrame","zoom","candleMaterial","useMemo","THREE","specular","shininess","flatShading","position","fallback","material","ReactDOM","render","colorManagement","orthographic","fov","pixelRatio","devicePixelRatio","document","getElementById"],"mappings":"qJAAA,yF,MAQQA,EAAUC,IAAYC,SAASC,OAAOC,SAASC,MAA/CL,MAEFM,EAAuBC,GACpBC,OAAOC,KAAKT,GAAOU,UAAWC,GAAMA,EAAEC,gBAAkBL,EAAOK,gBAAkB,EAEpFC,EACCb,EAAMc,MACJd,EAAMc,MAAMC,WAAW,KAAOf,EAAMc,MAAQ,IAAMd,EAAMc,MADtC,KAIrBE,EAAUC,eAAK,IAAM,oDACrBC,EAAUD,eAAK,IAAM,oDACrBE,EAAUF,eAAK,IAAM,oDAErBG,EAAQ,KAAO,MACXC,EAAWC,cAAXD,OAERE,YAAS,KAEHF,EAAOG,KADM,MAEfH,EAAOG,KAAOH,EAAOG,KAAkC,MAA1BH,EAAOG,KAFrB,QAMnB,MAAMC,EAAiBC,kBAAQ,IACtB,IAAIC,oBAAwB,CAAEb,MAAOD,GAAoB,UAAWe,SAAU,WAAYC,UAAW,GAAIC,aAAa,KAG/H,OACE,oCACE,uCACA,+BAAWC,SAAU,CAAC,GAAI,GAAI,MAC9B,gCAAYA,SAAU,EAAE,IAAK,IAAK,IAAKjB,MAAM,WAC5CR,EAAoB,YACnB,kBAAC,WAAD,CAAU0B,SAAU,MAClB,kBAAChB,EAAD,CAASiB,SAAUR,KAGtBnB,EAAoB,YACnB,kBAAC,WAAD,CAAU0B,SAAU,MAClB,kBAACd,EAAD,CAASe,SAAUR,KAGtBnB,EAAoB,YACnB,kBAAC,WAAD,CAAU0B,SAAU,MAClB,kBAACb,EAAD,CAASc,SAAUR,KAGvB,kBAAC,IAAD,QAKNS,IAASC,OACP,kBAAC,IAAD,CACEC,iBAAe,EACfC,cAAY,EACZhB,OAAQ,CAAEU,SAAU,CAAC,EAAG,EAAG,GAC3BP,KAAM,IAAKc,IAAK,IAChBC,WAAYpC,OAAOqC,kBAAoB,GAEvC,kBAACpB,EAAD,OAEFqB,SAASC,eAAe,U","file":"static/js/main.4a69f985.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { Suspense, lazy, useMemo } from 'react'\nimport { Canvas, useFrame, useThree } from 'react-three-fiber'\nimport { OrbitControls } from 'drei'\nimport queryString from 'query-string'\nimport './styles.css'\n\nconst { query } = queryString.parseUrl(window.location.href)\n\nconst containsQueryString = (string) => {\n  return Object.keys(query).findIndex((v) => v.toUpperCase() === string.toUpperCase()) > -1\n}\nconst queryStringColor = (function () {\n  if (!query.color) return null\n  return query.color.startsWith('#') ? query.color : '#' + query.color\n})()\n\nconst CandleA = lazy(() => import('./models/candleA'))\nconst CandleB = lazy(() => import('./models/candleB'))\nconst CandleC = lazy(() => import('./models/candleC'))\n\nconst Scene = () => {\n  const { camera } = useThree()\n\n  useFrame(() => {\n    const MAX_ZOOM = 300\n    if (camera.zoom > MAX_ZOOM) {\n      camera.zoom = camera.zoom - (camera.zoom - MAX_ZOOM) * 0.075\n    }\n  })\n\n  const candleMaterial = useMemo(() => {\n    return new THREE.MeshPhongMaterial({ color: queryStringColor || '#E18C46', specular: '#F111111', shininess: 30, flatShading: true })\n  })\n\n  return (\n    <>\n      <ambientLight />\n      <spotLight position={[10, 10, 10]} />\n      <pointLight position={[-10, -10, -10]} color=\"orange\" />\n      {containsQueryString('candleA') && (\n        <Suspense fallback={null}>\n          <CandleA material={candleMaterial} />\n        </Suspense>\n      )}\n      {containsQueryString('candleB') && (\n        <Suspense fallback={null}>\n          <CandleB material={candleMaterial} />\n        </Suspense>\n      )}\n      {containsQueryString('candleC') && (\n        <Suspense fallback={null}>\n          <CandleC material={candleMaterial} />\n        </Suspense>\n      )}\n      <OrbitControls />\n    </>\n  )\n}\n\nReactDOM.render(\n  <Canvas\n    colorManagement\n    orthographic\n    camera={{ position: [0, 2, 5],\n    zoom: 200, fov: 50 }}\n    pixelRatio={window.devicePixelRatio || 1}\n  >\n    <Scene />\n  </Canvas>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}