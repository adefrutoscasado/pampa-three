{"version":3,"sources":["index.js"],"names":["Candle","props","camera","useThree","object","useLoader","OBJLoader","candleMaterial","useMemo","THREE","traverse","child","material","useFrame","center","mesh","geometry","computeBoundingBox","boundingBox","getCenter","localToWorld","getCenterPoint","children","lookAt","updateProjectionMatrix","timer","Date","now","position","x","Math","sin","y","cos","z","rotateX","rotateY","rotateZ","scale","rotateOnAxis","attach","Scene","zoom","color","fallback","ReactDOM","render","colorManagement","orthographic","fov","document","getElementById"],"mappings":"qJAAA,gFAmBA,SAASA,EAAOC,GAAQ,MACdC,EAAWC,cAAXD,OACFE,EAASC,YAAUC,IAAW,sBAE9BC,EAAiBC,kBAAQ,IACtB,IAAIC,qBAEV,IAoCH,OAlCAD,kBAAQ,KACNJ,EAAOM,UAAS,SAAUC,GACpBA,aAAiBF,SACnBE,EAAMC,SAAWL,OAGpB,CAACH,IAEJS,YAAS,KACP,GAAIT,EAAQ,CACV,MAAMU,EA9BZ,SAAwBC,GACtB,MAAMC,EAAWD,EAAKC,SACtBA,EAASC,qBACT,MAAMH,EAAS,IAAIL,UAGnB,OAFAO,EAASE,YAAYC,UAAUL,GAC/BC,EAAKK,aAAaN,GACXA,EAwBYO,CAAejB,EAAOkB,SAAS,IAC9CpB,EAAOqB,OAAOT,GACdZ,EAAOsB,4BAIXX,YAAS,KACP,GAAIT,EAAQ,CACR,MAAMqB,EAAqB,MAAbC,KAAKC,MACnBvB,EAAOwB,SAASC,EAA0B,IAAtBC,KAAKC,IAAY,EAARN,GAC7BrB,EAAOwB,SAASI,EAA0B,IAAtBF,KAAKG,IAAY,EAARR,GAC7BrB,EAAOwB,SAASM,EAA0B,IAAtBJ,KAAKG,IAAY,EAARR,MAInCZ,YAAS,KACP,GAAIT,EAAQ,CACR,MAAMqB,EAAqB,MAAbC,KAAKC,MACnBvB,EAAO+B,QAASL,KAAKC,IAAY,EAARN,GAAa,KACtCrB,EAAOgC,QAASN,KAAKG,IAAY,EAARR,GAAa,KACtCrB,EAAOiC,QAASP,KAAKG,IAAY,EAARR,GAAa,QAK1C,oCACGrB,GACC,0CACMH,EADN,CAEEqC,MAAO,CAAC,IAAM,IAAM,KACpBV,SAAU,CAAC,EAAG,EAAG,GACjBW,aAAc,KAEd,+BAAWC,OAAO,OAAOpC,OAAQA,MAO3C,MAAMqC,EAAQ,KAAO,MAEjBvC,EACEC,cADFD,OAUF,OAPAW,YAAS,KAEHX,EAAOwC,KADM,MAEfxC,EAAOwC,KAAOxC,EAAOwC,KAAkC,MAA1BxC,EAAOwC,KAFrB,QAOjB,oCACE,uCACA,+BAAWd,SAAU,CAAC,GAAI,GAAI,MAC9B,gCAAYA,SAAU,EAAE,IAAK,IAAK,IAAKe,MAAM,QAC7C,kBAAC,WAAD,CAAUC,SAAU,MAClB,kBAAC5C,EAAD,OAEF,kBAAC,IAAD,QAKN6C,IAASC,OACP,kBAAC,IAAD,CACEC,iBAAe,EACfC,cAAY,EACZ9C,OAAQ,CAAE0B,SAAU,CAAC,EAAG,EAAG,GAAIc,KAAM,IAAKO,IAAK,KAE/C,kBAACR,EAAD,OAEFS,SAASC,eAAe,U","file":"static/js/main.b08e3625.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { useRef, useMemo, Suspense, useState, useEffect } from 'react'\nimport { Canvas, useFrame, useThree, useLoader, extend } from 'react-three-fiber'\nimport { OrbitControls } from 'drei'\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader';\nimport './styles.css'\n\nfunction getCenterPoint(mesh) {\n  const geometry = mesh.geometry\n  geometry.computeBoundingBox()\n  const center = new THREE.Vector3()\n  geometry.boundingBox.getCenter(center)\n  mesh.localToWorld(center)\n  return center\n}\n\n// fire? https://codepen.io/prisoner849/pen/XPVGLp\n\nfunction Candle(props) {\n  const { camera } = useThree()\n  const object = useLoader(OBJLoader, '/candle_single.obj')\n\n  const candleMaterial = useMemo(() => {\n    return new THREE.MeshNormalMaterial()\n    // return new THREE.MeshPhongMaterial()\n  }, [])\n\n  useMemo(() => {\n    object.traverse(function (child) {\n      if (child instanceof THREE.Mesh) {\n        child.material = candleMaterial\n      }\n    })\n  }, [object])\n\n  useFrame(() => {\n    if (object) {\n      const center = getCenterPoint(object.children[0])\n      camera.lookAt(center)\n      camera.updateProjectionMatrix()\n    }\n  })\n\n  useFrame(() => {\n    if (object) {\n        const timer = Date.now() * 0.00025\n        object.position.x = Math.sin(timer * 7) * 100\n        object.position.y = Math.cos(timer * 5) * 100\n        object.position.z = Math.cos(timer * 3) * 100\n    }\n  })\n\n  useFrame(() => {\n    if (object) {\n        const timer = Date.now() * 0.00025\n        object.rotateX( Math.sin(timer * 7) / 1000 )\n        object.rotateY( Math.cos(timer * 5) / 1000 )\n        object.rotateZ( Math.cos(timer * 3) / 1000 )\n    }\n  })\n\n  return (\n    <>\n      {object &&\n        <mesh\n          {...props}\n          scale={[0.01, 0.01, 0.01]}\n          position={[0, 0, 0]}\n          rotateOnAxis={90}\n        >\n          <primitive attach=\"mesh\" object={object} />\n        </mesh>\n      }\n    </>\n  )\n}\n\nconst Scene = () => {\n  const {\n    camera\n  } = useThree()\n\n  useFrame(() => {\n    const MAX_ZOOM = 200\n    if (camera.zoom > MAX_ZOOM) {\n      camera.zoom = camera.zoom - (camera.zoom - MAX_ZOOM) * 0.075\n    }\n  })\n\n  return (\n    <>\n      <ambientLight />\n      <spotLight position={[10, 10, 10]} />\n      <pointLight position={[-10, -10, -10]} color=\"red\" />\n      <Suspense fallback={null}>\n        <Candle />\n      </Suspense>\n      <OrbitControls />\n    </>\n  )\n}\n\nReactDOM.render(\n  <Canvas\n    colorManagement\n    orthographic\n    camera={{ position: [0, 5, 5], zoom: 150, fov: 50 }}\n  >\n    <Scene />\n  </Canvas>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}